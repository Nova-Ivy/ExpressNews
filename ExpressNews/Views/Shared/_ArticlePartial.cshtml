@model ExpressNews.Models.Database.Article
@if (Model == null)
    return;
@if (Model != null)
{
<article>
    <div class="w-100 p-3 border bg-white">
        <h1 style="color:black">
            @Model.HeadLine
        </h1>
        <img class="img" src="@Model.ImageLink" alt="Chinese leader Xi Jinping and Russian President Vladimir Putin attend the opening ceremony of the Belt and Road Forum at the Great Hall of the People in Beijing last October.
                    Pedro Pardo/AFP/Getty Images" width="80%" height="80%" />  <br />
            <span style="font-size:smaller; align-items: center">
                <i >@Model.ContentSummary</i>
        </span>

        <div> <img src="https://images.aftonbladet-cdn.se/v2/images/author/602ef119-32a3-4a6a-b86e-0ebfdb56a147?fit=crop&format=auto&h=200&q=50&w=200&s=bf448d3ea14d0c2c6bab84ccd5df48bc6416913f" width="50" height="60" /> 
           <b>@Model.UserName</b> </div>
        <span><i class="font-size: small"> Published @Model.DateStamp </i></span>
            <div class="">
                <button id="like-button" class="like-button">
                    Like <span id="like-count">@Model.Likes</span>
                </button>
                <button id="dislike-button" class="dislike-button">
                    Dislike <span id="dislike-count">@Model.DisLikes</span>
                </button>
                <span id="views-count">@Model.Views Views</span>
            </div>

        <hr>
            <p class="content">
                @Model.Content
            </p>
    </div>
</article>
}
<script src="script.js"></script>
<style>
    /* Styles for better presentation (optional) */
    .buttons-container {
        display: flex;
        align-items: center;
        justify-content: flex-end; /* Align items to the right */
        gap: 10px; /* Space between elements */
        padding: 10px; /* Add some padding around the container */
        background-color: #f9f9f9; /* Light grey background */
        border: 1px solid #ddd; /* Light border */
        border-radius: 5px; /* Rounded corners */
    }

    .like-button, .dislike-button {
        padding: 10px 15px; /* Add padding inside the buttons */
        border: none; /* Remove default button border */
        border-radius: 5px; /* Rounded corners for buttons */
        cursor: pointer; /* Change cursor on hover */
        font-size: 12px; /* Larger font size for buttons */
        transition: background-color 0.3s; /* Smooth transition for hover effect */
    }

    .like-button {
        background-color: #4CAF50; /* Green background for like button */
        color: white; /* White text color */
    }

        .like-button:hover {
            background-color: #45a049; /* Darker green on hover */
        }

    .dislike-button {
        background-color: #f44336; /* Red background for dislike button */
        color: white; /* White text color */
    }

        .dislike-button:hover {
            background-color: #e53935; /* Darker red on hover */
        }

    #views-count {
        border-radius: 5px;
        padding: 10px 15px;
        background-color: black;
        font-size: 12px; /* Font size for views count */
        color: white; /* Dark grey text color */
        
    }
    .content {
        font-size: 18px;
        text-align: justify;
    }
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
    }

    .date-column {
        font-size: 9px;
        color: #666;
        margin-top: 5px;
    }

    .author-info {
        display: flex;
        align-items: center;
    }

        .author-info img {
            margin-right: 10px;
        }

    .img {
        display: block;
        margin-left: auto;
        margin-right: auto;
        border: solid;
    }

    .buttons-container {
        display: flex;
        gap: 10px;
    }

    button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f0f0f0;
    }

        button:hover {
            background-color: #e0e0e0;
        }

    
</style>
<script>
    var myStorage = window.localStorage, pageCount;
    window.addEventListener('load', function () {
        $.ajax({
            url: '@Url.Action("UpdateViewCount", "Article")', // Endpoint URL
            type: 'POST',
            data: { id: @Model.Id, viewCount: 1 }, // Data to be sent to the server
            success: function (response) {

            },
            error: function (xhr, status, error) {
                console.error('Error updating item count');
            }
        });
    });

    document.addEventListener("DOMContentLoaded", () => {
        const likeButton = document.getElementById("like-button");
        const dislikeButton = document.getElementById("dislike-button");
        const likeCount = document.getElementById("like-count");
        const dislikeCount = document.getElementById("dislike-count");
        const viewCount = document.getElementById("view-count");

        let likes = 0;
        let dislikes = 0;
        let views = 0;

        likeButton.addEventListener("click", () => {
            likes++;
            likeCount.textContent = likes;
        });

        dislikeButton.addEventListener("click", () => {
            dislikes++;
            dislikeCount.textContent = dislikes;
        });

        // Fetch initial counts from the server
        fetch('/counts')
            .then(response => response.json())
            .then(data => {
                likeCount.textContent = data.likes;
                dislikeCount.textContent = data.dislikes;
                viewCount.textContent = data.views;
            });

    });
    
</script>

