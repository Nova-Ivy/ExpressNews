@* @model IEnumerable<ExpressNews.Models.ViewModel.UserVM> *@
@{
    ViewBag.Title = "Admin Dashboard";
    
}

<h2>Dashboard</h2>
<style>
    .chart-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chart-box {
        width: 20%;
    }
</style>


<div class="chart-container">
    <div class="chart-box">
        <canvas id="userChart" width="200" height="300"></canvas>
    </div>
    <div>
      
        <table class="table table-bordered">
            <tr>
                <th>Subscription Type</th>
                <th>Count</th>
            </tr>
            <tr>
                <td>Basic Subscriptions</td>
                <td>@ViewBag.basicCount</td>
            </tr>
            <tr>
                <td>Premium Subscriptions</td>
                <td>@ViewBag.premiumCount</td>
            </tr>
            <tr>
                <td>Non Subscribed</td>
                <td>@ViewBag.NonSubscribedCount</td>
            </tr>
        </table>
    </div>
    <div class="chart-box">
        <canvas id="subscriptionChart" width="400" height="300"></canvas>
    </div>
    <div class="chart-box">
        <canvas id="articleCategoryChart" width="400" height="300"></canvas>
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
@* <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> *@
<script>
    //Count all user except admin
    var ctx = document.getElementById('userChart').getContext('2d');
    var userChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Members', 'Journalists', 'Editors'],
            datasets: [{
                label: '# of Users',
                data: [@ViewBag.MemberCount,@ViewBag.JournalistCount,@ViewBag.EditorCount],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(75, 192, 192, 0.6)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    //Subscriber procentage
    var ctxPie = document.getElementById('subscriptionChart').getContext('2d');
    var subscriptionChart = new Chart(ctxPie, {
        type: 'pie',
        data: {
            labels: ['Subscribed', 'Non-Subscribed'],
            datasets: [{
                data: [@ViewBag.SubscribedCount, @ViewBag.NonSubscribedCount],
                backgroundColor: [
                    'rgb(255,0,0)',
                    'rgb(54, 162, 235)'
                ],
                borderColor: [
                    'rgb(255,0,0)',
                    'rgb(54, 162, 235)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    formatter: (value, context) => {
                        let sum = 0;
                        let dataArr = context.chart.data.datasets[0].data;
                        dataArr.map(data => {
                            sum += data;
                        });
                        let percentage = (value * 100 / sum).toFixed(2) + "%";
                        return percentage;
                    },
                    color: '#fff',
                    font: {
                        weight: 'bold',
                        size: 14
                    }
                }
            }
        },
        plugins: [ChartDataLabels]
    });
        
</script>
 <script>
    document.addEventListener("DOMContentLoaded", function () {
        var categoryCounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.CategoryCounts));

        var ctx = document.getElementById('articleCategoryChart').getContext('2d');
        var articleCategoryChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: Object.keys(categoryCounts),
                datasets: [{
                    label: 'Article Categories',
                    data: Object.values(categoryCounts),
                    backgroundColor: [
                        'rgba(45, 62, 80, 0.8)',   // Dark Gray Blue
                        'rgba(25, 42, 86, 0.8)',   // Dark Blue
                        'rgba(44, 62, 80, 0.8)',   // Darker Gray Blue
                        'rgba(39, 174, 96, 0.8)',  // Dark Green
                        'rgba(192, 57, 43, 0.8)',  // Dark Red
                        'rgba(142, 68, 173, 0.8)', // Dark Purple
                        'rgba(243, 156, 18, 0.8)'  // Dark Orange
                    ],
                    borderColor: [
                        'rgba(45, 62, 80, 0.8)',   // Dark Gray Blue
                        'rgba(25, 42, 86, 0.8)',   // Dark Blue
                        'rgba(44, 62, 80, 0.8)',   // Darker Gray Blue
                        'rgba(39, 174, 96, 0.8)',  // Dark Green
                        'rgba(192, 57, 43, 0.8)',  // Dark Red
                        'rgba(142, 68, 173, 0.8)', // Dark Purple
                        'rgba(243, 156, 18, 0.8)'  // Dark Orange
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                let total = tooltipItem.dataset.data.reduce((sum, value) => sum + value, 0);
                                let percentage = ((tooltipItem.raw / total) * 100).toFixed(2);
                                return tooltipItem.label + ': ' + tooltipItem.raw + ' articles (' + percentage + '%)';
                            }
                        }
                    },
                    datalabels: {
                        formatter: (value, ctx) => {
                            let total = ctx.chart.data.datasets[0].data.reduce((sum, value) => sum + value, 0);
                            let percentage = ((value / total) * 100).toFixed(2);
                            return percentage + '%';
                        },
                        color: '#fff',
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    });
</script> 

